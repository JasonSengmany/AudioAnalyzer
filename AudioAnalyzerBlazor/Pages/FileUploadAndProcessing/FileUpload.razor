@inject AudioAnalyzerService AudioAnalyzerService
@inject IWebHostEnvironment Environment
@inject UploadedFilesState UploadedFileState
@inject ILogger<FileUpload> logger
@implements IDisposable

<div class="drag-drop-zone">
    <InputFile OnChange="@LoadFiles" multiple />
    <label>Click here to add a file or drag and drop the file here</label>
</div>

@code {
    private string cachedUploadedFileName = String.Empty; // To allow clean-up of partially copied files.
    private long maxFileSize = 40 * 1024 * 1024;
    private int maxAllowedFiles = 20;

    protected override void OnInitialized()
    {
        UploadedFileState.OnChange += StateHasChanged;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var trustedFileNameForFileStorage = $"{Path.GetRandomFileName()}{Path.GetExtension(file.Name)}";
                var path = Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName, "unsafe_uploads",
                trustedFileNameForFileStorage);
                logger.LogInformation($"Uploading file: {path}");
                await using FileStream fs = new(path, FileMode.Create);
                cachedUploadedFileName = path;
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                AudioAnalyzerService.LoadSongs(path);
                UploadedFileState.AddFile(new() { FileName = path, UnsafeFileName = file.Name });
            }
            catch
            {
                logger.LogWarning($"Exception has occurred during file upload. All uploads will be cleared.");
                // Clean up all loaded files if exception had occurred to prevent inconsistent state.
                foreach (var upload in UploadedFileState.UploadedFiles)
                {
                    File.Delete(upload.FileName);
                }
                File.Delete(cachedUploadedFileName);
                UploadedFileState.UploadedFiles.Clear();
                AudioAnalyzerService.Songs.Clear();
            }
            finally
            {
                cachedUploadedFileName = String.Empty;
            }
        }
    }

    public void Dispose()
    {
        UploadedFileState.OnChange -= StateHasChanged;
    }
}